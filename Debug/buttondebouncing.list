
buttondebouncing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001778  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d0  080018d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080018d0  080018d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018d8  080018d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080018ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080018ec  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c11  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001090  00000000  00000000  00023c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00024cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00025150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c29  00000000  00000000  00025520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f42  00000000  00000000  00039149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b076  00000000  00000000  0003e08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f98  00000000  00000000  000b9154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800189c 	.word	0x0800189c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800189c 	.word	0x0800189c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fac6 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f810 	bl	80004b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //init_button_interrupt();
  //init_button2_interrupt();
  init_button();
 8000490:	f000 f8e6 	bl	8000660 <init_button>
  init_button2();
 8000494:	f000 f90c 	bl	80006b0 <init_button2>
  init_led_green();
 8000498:	f000 fa2a 	bl	80008f0 <init_led_green>
  init_led_blue();
 800049c:	f000 fa62 	bl	8000964 <init_led_blue>
  init_counter_interrupt();
 80004a0:	f000 f9d0 	bl	8000844 <init_counter_interrupt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debounce_time_in_millis(500);
 80004a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a8:	f000 f9f6 	bl	8000898 <debounce_time_in_millis>
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x28>
	...

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b092      	sub	sp, #72	; 0x48
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	2234      	movs	r2, #52	; 0x34
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f9e4 	bl	800188c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <SystemClock_Config+0x98>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <SystemClock_Config+0x98>)
 80004dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e2:	2302      	movs	r3, #2
 80004e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	2301      	movs	r3, #1
 80004e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ea:	2310      	movs	r3, #16
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000500:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fbd8 	bl	8000cbc <HAL_RCC_OscConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000512:	f000 f81b 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000516:	230f      	movs	r3, #15
 8000518:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051a:	2303      	movs	r3, #3
 800051c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fef4 	bl	800131c <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800053a:	f000 f807 	bl	800054c <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3748      	adds	r7, #72	; 0x48
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40007000 	.word	0x40007000

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_MspInit+0x5c>)
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000568:	6253      	str	r3, [r2, #36]	; 0x24
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_MspInit+0x5c>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x5c>)
 8000578:	6a1b      	ldr	r3, [r3, #32]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6213      	str	r3, [r2, #32]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x5c>)
 8000584:	6a1b      	ldr	r3, [r3, #32]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_MspInit+0x5c>)
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_MspInit+0x5c>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	6253      	str	r3, [r2, #36]	; 0x24
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_MspInit+0x5c>)
 800059c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a6:	2007      	movs	r0, #7
 80005a8:	f000 fb54 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fe:	f000 fa5d 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}

08000606 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063a:	f7ff ffe4 	bl	8000606 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063e:	f001 f901 	bl	8001844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff ff1f 	bl	8000484 <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	080018e0 	.word	0x080018e0
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	2000002c 	.word	0x2000002c

0800065c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_IRQHandler>
	...

08000660 <init_button>:
#include "stm32l152xc.h"
#include "counter.h"
#include "button_driver.h"

void init_button(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 0);
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <init_button+0x48>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <init_button+0x48>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	61d3      	str	r3, [r2, #28]

	GPIOA->MODER &= ~(1 << 0);
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <init_button+0x4c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <init_button+0x4c>)
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 1);
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <init_button+0x4c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <init_button+0x4c>)
 8000682:	f023 0302 	bic.w	r3, r3, #2
 8000686:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~(1 << 0);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <init_button+0x4c>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <init_button+0x4c>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1 << 1);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <init_button+0x4c>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <init_button+0x4c>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <init_button2>:

void init_button2(void){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 0);
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <init_button2+0x48>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <init_button2+0x48>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	61d3      	str	r3, [r2, #28]

	GPIOA->MODER &= ~(1 << 2);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <init_button2+0x4c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <init_button2+0x4c>)
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 3);
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <init_button2+0x4c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <init_button2+0x4c>)
 80006d2:	f023 0308 	bic.w	r3, r3, #8
 80006d6:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~(1 << 2);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <init_button2+0x4c>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <init_button2+0x4c>)
 80006de:	f023 0304 	bic.w	r3, r3, #4
 80006e2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1 << 3);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <init_button2+0x4c>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <init_button2+0x4c>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000

08000700 <button_status>:

int button_status(void){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & (1 << 0)){
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <button_status+0x24>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <button_status+0x14>
		return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e002      	b.n	800071a <button_status+0x1a>
	}
	else if(GPIOA->IDR | ~(1 << 0)){
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <button_status+0x24>)
 8000716:	691b      	ldr	r3, [r3, #16]
		return 0;
 8000718:	2300      	movs	r3, #0
	}
	else{
		asm("NOP");
	}
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40020000 	.word	0x40020000

08000728 <button2_status>:

int button2_status(void){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & (1 << 1)){
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <button2_status+0x24>)
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <button2_status+0x14>
		return 1;
 8000738:	2301      	movs	r3, #1
 800073a:	e002      	b.n	8000742 <button2_status+0x1a>
	}
	else if(GPIOA->IDR | ~(1 << 1)){
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <button2_status+0x24>)
 800073e:	691b      	ldr	r3, [r3, #16]
		return 0;
 8000740:	2300      	movs	r3, #0
	}
	else{
		asm("NOP");
	}
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40020000 	.word	0x40020000

08000750 <EXTI0_IRQHandler>:

	NVIC_SetPriority(EXTI1_IRQn, 1);
	NVIC_EnableIRQ(EXTI1_IRQn);
}

void EXTI0_IRQHandler(void){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PIF0;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <EXTI0_IRQHandler+0x2c>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <EXTI0_IRQHandler+0x2c>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6153      	str	r3, [r2, #20]

	TIM6->CNT = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <EXTI0_IRQHandler+0x30>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= (1 << 0);
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <EXTI0_IRQHandler+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <EXTI0_IRQHandler+0x30>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6013      	str	r3, [r2, #0]

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40010400 	.word	0x40010400
 8000780:	40001000 	.word	0x40001000

08000784 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PIF1;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <EXTI1_IRQHandler+0x2c>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <EXTI1_IRQHandler+0x2c>)
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	6153      	str	r3, [r2, #20]

	TIM6->CNT = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <EXTI1_IRQHandler+0x30>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= (1 << 0);
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <EXTI1_IRQHandler+0x30>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <EXTI1_IRQHandler+0x30>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]

}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40010400 	.word	0x40010400
 80007b4:	40001000 	.word	0x40001000

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <init_counter_interrupt>:
#include "stm32l152xc.h"
#include "button_driver.h"
#include "led_driver.h"
#include "counter.h"

void init_counter_interrupt(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 4);
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <init_counter_interrupt+0x4c>)
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <init_counter_interrupt+0x4c>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6253      	str	r3, [r2, #36]	; 0x24

	TIM6->CR1 |= (1 << 0);
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <init_counter_interrupt+0x50>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <init_counter_interrupt+0x50>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]

	TIM6->PSC = 31999;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <init_counter_interrupt+0x50>)
 8000862:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000866:	629a      	str	r2, [r3, #40]	; 0x28

	TIM6->ARR = 999;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <init_counter_interrupt+0x50>)
 800086a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM6->DIER |= TIM_DIER_UIE;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <init_counter_interrupt+0x50>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <init_counter_interrupt+0x50>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM6_IRQn);
 800087c:	202b      	movs	r0, #43	; 0x2b
 800087e:	f7ff ff9b 	bl	80007b8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM6_IRQn,1);
 8000882:	2101      	movs	r1, #1
 8000884:	202b      	movs	r0, #43	; 0x2b
 8000886:	f7ff ffb3 	bl	80007f0 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40001000 	.word	0x40001000

08000898 <debounce_time_in_millis>:

void disable_counter(void){
	TIM6->CR1 &= ~(1 << 0);
}

void debounce_time_in_millis(uint16_t milliSeconds){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	TIM6->ARR = milliSeconds - 1;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <debounce_time_in_millis+0x1c>)
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40001000 	.word	0x40001000

080008b8 <TIM6_IRQHandler>:

void TIM6_IRQHandler(void){
 80008b8:	b598      	push	{r3, r4, r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	TIM6->SR &= ~(1 << 0);
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <TIM6_IRQHandler+0x34>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <TIM6_IRQHandler+0x34>)
 80008c2:	f023 0301 	bic.w	r3, r3, #1
 80008c6:	6113      	str	r3, [r2, #16]

	if(button_status() | button2_status()){
 80008c8:	f7ff ff1a 	bl	8000700 <button_status>
 80008cc:	4604      	mov	r4, r0
 80008ce:	f7ff ff2b 	bl	8000728 <button2_status>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4323      	orrs	r3, r4
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <TIM6_IRQHandler+0x2a>
		led_blue_write(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 f87c 	bl	80009d8 <led_blue_write>
	}
	else{
		led_blue_write(0);
	}
}
 80008e0:	e002      	b.n	80008e8 <TIM6_IRQHandler+0x30>
		led_blue_write(0);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f878 	bl	80009d8 <led_blue_write>
}
 80008e8:	bf00      	nop
 80008ea:	bd98      	pop	{r3, r4, r7, pc}
 80008ec:	40001000 	.word	0x40001000

080008f0 <init_led_green>:
#include "stm32l152xc.h"

void init_led_green(void){
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 1);
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <init_led_green+0x6c>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a18      	ldr	r2, [pc, #96]	; (800095c <init_led_green+0x6c>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	61d3      	str	r3, [r2, #28]

	GPIOB->MODER |= (1 << 14);
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <init_led_green+0x70>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a16      	ldr	r2, [pc, #88]	; (8000960 <init_led_green+0x70>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 15);
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <init_led_green+0x70>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <init_led_green+0x70>)
 8000912:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000916:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER &= ~(1 << 7);
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <init_led_green+0x70>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a10      	ldr	r2, [pc, #64]	; (8000960 <init_led_green+0x70>)
 800091e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000922:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR &= ~(1 << 14);
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <init_led_green+0x70>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <init_led_green+0x70>)
 800092a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800092e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR &= ~(1 << 15);
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <init_led_green+0x70>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <init_led_green+0x70>)
 8000936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800093a:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(1 << 14);
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <init_led_green+0x70>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <init_led_green+0x70>)
 8000942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000946:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1 << 15);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <init_led_green+0x70>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <init_led_green+0x70>)
 800094e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400

08000964 <init_led_blue>:

void init_led_blue(void){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 1);
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <init_led_blue+0x6c>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <init_led_blue+0x6c>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	61d3      	str	r3, [r2, #28]

	GPIOB->MODER |= (1 << 12);
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <init_led_blue+0x70>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <init_led_blue+0x70>)
 800097a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 13);
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <init_led_blue+0x70>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <init_led_blue+0x70>)
 8000986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800098a:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER &= ~(1 << 6);
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <init_led_blue+0x70>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <init_led_blue+0x70>)
 8000992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000996:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR &= ~(1 << 12);
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <init_led_blue+0x70>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <init_led_blue+0x70>)
 800099e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR &= ~(1 << 13);
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <init_led_blue+0x70>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <init_led_blue+0x70>)
 80009aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009ae:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(1 << 12);
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <init_led_blue+0x70>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <init_led_blue+0x70>)
 80009b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ba:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1 << 13);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <init_led_blue+0x70>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <init_led_blue+0x70>)
 80009c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_blue_write>:
	else{
		asm("NOP");
	}
}

void led_blue_write(int status){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if(status==1){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <led_blue_write+0x1c>
		GPIOB->ODR |= (1 << 6);
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <led_blue_write+0x3c>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <led_blue_write+0x3c>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1 << 6);
	}
	else{
		asm("NOP");
	}
}
 80009f2:	e00a      	b.n	8000a0a <led_blue_write+0x32>
	else if(status==0){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <led_blue_write+0x30>
		GPIOB->ODR &= ~(1 << 6);
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <led_blue_write+0x3c>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <led_blue_write+0x3c>)
 8000a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a04:	6153      	str	r3, [r2, #20]
}
 8000a06:	e000      	b.n	8000a0a <led_blue_write+0x32>
		asm("NOP");
 8000a08:	bf00      	nop
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f916 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80d 	bl	8000a48 <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fd8d 	bl	8000558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_InitTick+0x6c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f916 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10f      	bne.n	8000a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d809      	bhi.n	8000a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f000 f8ee 	bl	8000c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_InitTick+0x70>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e004      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	20000008 	.word	0x20000008

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000028 	.word	0x20000028

08000af4 <__NVIC_SetPriorityGrouping>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_SetPriority>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff90 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff49 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff5e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff90 	bl	8000bac <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5f 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffb0 	bl	8000c10 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e31d      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd8:	4b91      	ldr	r3, [pc, #580]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d07b      	beq.n	8000de6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d006      	beq.n	8000d02 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2b0c      	cmp	r3, #12
 8000cf8:	d10f      	bne.n	8000d1a <HAL_RCC_OscConfig+0x5e>
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d00:	d10b      	bne.n	8000d1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d02:	4b87      	ldr	r3, [pc, #540]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d06a      	beq.n	8000de4 <HAL_RCC_OscConfig+0x128>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d166      	bne.n	8000de4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e2f7      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d106      	bne.n	8000d30 <HAL_RCC_OscConfig+0x74>
 8000d22:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a7e      	ldr	r2, [pc, #504]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e02d      	b.n	8000d8c <HAL_RCC_OscConfig+0xd0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10c      	bne.n	8000d52 <HAL_RCC_OscConfig+0x96>
 8000d38:	4b79      	ldr	r3, [pc, #484]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a78      	ldr	r2, [pc, #480]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a75      	ldr	r2, [pc, #468]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e01c      	b.n	8000d8c <HAL_RCC_OscConfig+0xd0>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0xb8>
 8000d5a:	4b71      	ldr	r3, [pc, #452]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a70      	ldr	r2, [pc, #448]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a6d      	ldr	r2, [pc, #436]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xd0>
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a69      	ldr	r2, [pc, #420]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a66      	ldr	r2, [pc, #408]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fea4 	bl	8000ae0 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fea0 	bl	8000ae0 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e2ad      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe0>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fe90 	bl	8000ae0 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fe8c 	bl	8000ae0 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e299      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x108>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d05a      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d005      	beq.n	8000e04 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b0c      	cmp	r3, #12
 8000dfc:	d119      	bne.n	8000e32 <HAL_RCC_OscConfig+0x176>
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d116      	bne.n	8000e32 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <HAL_RCC_OscConfig+0x160>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d001      	beq.n	8000e1c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e276      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1c:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	493d      	ldr	r1, [pc, #244]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e30:	e03a      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d020      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_RCC_OscConfig+0x268>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fe4e 	bl	8000ae0 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fe4a 	bl	8000ae0 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e257      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	492a      	ldr	r1, [pc, #168]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	604b      	str	r3, [r1, #4]
 8000e7a:	e015      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_RCC_OscConfig+0x268>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fe2d 	bl	8000ae0 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fe29 	bl	8000ae0 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e236      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80b8 	beq.w	8001026 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d170      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x218>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e21a      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1a      	ldr	r2, [r3, #32]
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d921      	bls.n	8000f28 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fc4b 	bl	8001784 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e208      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4906      	ldr	r1, [pc, #24]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	061b      	lsls	r3, r3, #24
 8000f18:	4901      	ldr	r1, [pc, #4]	; (8000f20 <HAL_RCC_OscConfig+0x264>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
 8000f1e:	e020      	b.n	8000f62 <HAL_RCC_OscConfig+0x2a6>
 8000f20:	40023800 	.word	0x40023800
 8000f24:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f28:	4b99      	ldr	r3, [pc, #612]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4996      	ldr	r1, [pc, #600]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f3a:	4b95      	ldr	r3, [pc, #596]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	061b      	lsls	r3, r3, #24
 8000f48:	4991      	ldr	r1, [pc, #580]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fc16 	bl	8001784 <RCC_SetFlashLatencyFromMSIRange>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e1d3      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	0b5b      	lsrs	r3, r3, #13
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f72:	4a87      	ldr	r2, [pc, #540]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f74:	6892      	ldr	r2, [r2, #8]
 8000f76:	0912      	lsrs	r2, r2, #4
 8000f78:	f002 020f 	and.w	r2, r2, #15
 8000f7c:	4985      	ldr	r1, [pc, #532]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000f7e:	5c8a      	ldrb	r2, [r1, r2]
 8000f80:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f82:	4a85      	ldr	r2, [pc, #532]	; (8001198 <HAL_RCC_OscConfig+0x4dc>)
 8000f84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f86:	4b85      	ldr	r3, [pc, #532]	; (800119c <HAL_RCC_OscConfig+0x4e0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fd5c 	bl	8000a48 <HAL_InitTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d045      	beq.n	8001026 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	e1b5      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d029      	beq.n	8000ffa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fa6:	4b7e      	ldr	r3, [pc, #504]	; (80011a0 <HAL_RCC_OscConfig+0x4e4>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fd98 	bl	8000ae0 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fd94 	bl	8000ae0 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1a1      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fc6:	4b72      	ldr	r3, [pc, #456]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	496c      	ldr	r1, [pc, #432]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe4:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	4967      	ldr	r1, [pc, #412]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ffa:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <HAL_RCC_OscConfig+0x4e4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fd6e 	bl	8000ae0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001008:	f7ff fd6a 	bl	8000ae0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e177      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d030      	beq.n	8001094 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d016      	beq.n	8001068 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103a:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <HAL_RCC_OscConfig+0x4e8>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fd4e 	bl	8000ae0 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001048:	f7ff fd4a 	bl	8000ae0 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e157      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800105a:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x38c>
 8001066:	e015      	b.n	8001094 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001068:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <HAL_RCC_OscConfig+0x4e8>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fd37 	bl	8000ae0 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001076:	f7ff fd33 	bl	8000ae0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e140      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001088:	4b41      	ldr	r3, [pc, #260]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f0      	bne.n	8001076 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b5 	beq.w	800120c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6253      	str	r3, [r2, #36]	; 0x24
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ca:	2301      	movs	r3, #1
 80010cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_OscConfig+0x4ec>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_RCC_OscConfig+0x4ec>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a32      	ldr	r2, [pc, #200]	; (80011a8 <HAL_RCC_OscConfig+0x4ec>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fcfb 	bl	8000ae0 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff fcf7 	bl	8000ae0 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e104      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_RCC_OscConfig+0x4ec>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x466>
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6353      	str	r3, [r2, #52]	; 0x34
 8001120:	e02d      	b.n	800117e <HAL_RCC_OscConfig+0x4c2>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x488>
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001134:	6353      	str	r3, [r2, #52]	; 0x34
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001140:	6353      	str	r3, [r2, #52]	; 0x34
 8001142:	e01c      	b.n	800117e <HAL_RCC_OscConfig+0x4c2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x4aa>
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001150:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6353      	str	r3, [r2, #52]	; 0x34
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6353      	str	r3, [r2, #52]	; 0x34
 8001164:	e00b      	b.n	800117e <HAL_RCC_OscConfig+0x4c2>
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 800116c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001170:	6353      	str	r3, [r2, #52]	; 0x34
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8001178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800117c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d024      	beq.n	80011d0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fcab 	bl	8000ae0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800118c:	e019      	b.n	80011c2 <HAL_RCC_OscConfig+0x506>
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	080018c0 	.word	0x080018c0
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	42470020 	.word	0x42470020
 80011a4:	42470680 	.word	0x42470680
 80011a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc98 	bl	8000ae0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e0a3      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0ee      	beq.n	80011ac <HAL_RCC_OscConfig+0x4f0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc86 	bl	8000ae0 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc82 	bl	8000ae0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e08d      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ee      	bne.n	80011d8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b44      	ldr	r3, [pc, #272]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	4a43      	ldr	r2, [pc, #268]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 8001206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d079      	beq.n	8001308 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d056      	beq.n	80012c8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2b02      	cmp	r3, #2
 8001220:	d13b      	bne.n	800129a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x65c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc5a 	bl	8000ae0 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fc56 	bl	8000ae0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e063      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	4319      	orrs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	430b      	orrs	r3, r1
 8001266:	492b      	ldr	r1, [pc, #172]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x65c>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fc35 	bl	8000ae0 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fc31 	bl	8000ae0 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e03e      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x5be>
 8001298:	e036      	b.n	8001308 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_RCC_OscConfig+0x65c>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc1e 	bl	8000ae0 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fc1a 	bl	8000ae0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e027      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5ec>
 80012c6:	e01f      	b.n	8001308 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e01a      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_RCC_OscConfig+0x658>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d10d      	bne.n	8001304 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	42470060 	.word	0x42470060

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e11a      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d919      	bls.n	8001372 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_ClockConfig+0x34>
 8001344:	4b8a      	ldr	r3, [pc, #552]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a89      	ldr	r2, [pc, #548]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b87      	ldr	r3, [pc, #540]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 0201 	bic.w	r2, r3, #1
 8001358:	4985      	ldr	r1, [pc, #532]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001360:	4b83      	ldr	r3, [pc, #524]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0f9      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	497a      	ldr	r1, [pc, #488]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 808e 	beq.w	80014ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a6:	4b73      	ldr	r3, [pc, #460]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d121      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0d7      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d115      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0cb      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d6:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0bf      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013e6:	4b63      	ldr	r3, [pc, #396]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0b7      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f023 0203 	bic.w	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	495c      	ldr	r1, [pc, #368]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fb6a 	bl	8000ae0 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d112      	bne.n	800143c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fb62 	bl	8000ae0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e09b      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d1ee      	bne.n	8001418 <HAL_RCC_ClockConfig+0xfc>
 800143a:	e03e      	b.n	80014ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d112      	bne.n	800146a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001444:	e00a      	b.n	800145c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001446:	f7ff fb4b 	bl	8000ae0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e084      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_ClockConfig+0x12a>
 8001468:	e027      	b.n	80014ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11d      	bne.n	80014ae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff fb34 	bl	8000ae0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e06d      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_ClockConfig+0x158>
 8001496:	e010      	b.n	80014ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fb22 	bl	8000ae0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e05b      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ee      	bne.n	8001498 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d219      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_ClockConfig+0x1be>
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 0201 	bic.w	r2, r3, #1
 80014e2:	4923      	ldr	r1, [pc, #140]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_RCC_ClockConfig+0x254>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e034      	b.n	8001566 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4917      	ldr	r1, [pc, #92]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490f      	ldr	r1, [pc, #60]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f823 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 800153e:	4602      	mov	r2, r0
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_RCC_ClockConfig+0x258>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	490b      	ldr	r1, [pc, #44]	; (8001578 <HAL_RCC_ClockConfig+0x25c>)
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fa74 	bl	8000a48 <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	72fb      	strb	r3, [r7, #11]

  return status;
 8001564:	7afb      	ldrb	r3, [r7, #11]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00
 8001574:	40023800 	.word	0x40023800
 8001578:	080018c0 	.word	0x080018c0
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001588:	b092      	sub	sp, #72	; 0x48
 800158a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800158c:	4b79      	ldr	r3, [pc, #484]	; (8001774 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d00d      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x34>
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f200 80d5 	bhi.w	800174c <HAL_RCC_GetSysClockFreq+0x1c8>
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x28>
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x2e>
 80015aa:	e0cf      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b72      	ldr	r3, [pc, #456]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80015b0:	e0da      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80015b6:	e0d7      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80015b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	f003 020f 	and.w	r2, r3, #15
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80015c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c8:	0d9b      	lsrs	r3, r3, #22
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	3301      	adds	r3, #1
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d2:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d05d      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e0:	2200      	movs	r2, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	4611      	mov	r1, r2
 80015e6:	4604      	mov	r4, r0
 80015e8:	460d      	mov	r5, r1
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	0159      	lsls	r1, r3, #5
 80015f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fc:	0150      	lsls	r0, r2, #5
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4621      	mov	r1, r4
 8001604:	1a51      	subs	r1, r2, r1
 8001606:	6139      	str	r1, [r7, #16]
 8001608:	4629      	mov	r1, r5
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800161c:	4659      	mov	r1, fp
 800161e:	018b      	lsls	r3, r1, #6
 8001620:	4651      	mov	r1, sl
 8001622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001626:	4651      	mov	r1, sl
 8001628:	018a      	lsls	r2, r1, #6
 800162a:	46d4      	mov	ip, sl
 800162c:	ebb2 080c 	subs.w	r8, r2, ip
 8001630:	4659      	mov	r1, fp
 8001632:	eb63 0901 	sbc.w	r9, r3, r1
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800164a:	4690      	mov	r8, r2
 800164c:	4699      	mov	r9, r3
 800164e:	4623      	mov	r3, r4
 8001650:	eb18 0303 	adds.w	r3, r8, r3
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	462b      	mov	r3, r5
 8001658:	eb49 0303 	adc.w	r3, r9, r3
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800166a:	4629      	mov	r1, r5
 800166c:	024b      	lsls	r3, r1, #9
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	4604      	mov	r4, r0
 8001674:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001678:	4601      	mov	r1, r0
 800167a:	024a      	lsls	r2, r1, #9
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	2200      	movs	r2, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
 8001686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800168c:	f7fe fd76 	bl	800017c <__aeabi_uldivmod>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4613      	mov	r3, r2
 8001696:	647b      	str	r3, [r7, #68]	; 0x44
 8001698:	e055      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169c:	2200      	movs	r2, #0
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	627a      	str	r2, [r7, #36]	; 0x24
 80016a2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016a6:	4642      	mov	r2, r8
 80016a8:	464b      	mov	r3, r9
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0159      	lsls	r1, r3, #5
 80016b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b8:	0150      	lsls	r0, r2, #5
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	46c4      	mov	ip, r8
 80016c0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80016c4:	4640      	mov	r0, r8
 80016c6:	4649      	mov	r1, r9
 80016c8:	468c      	mov	ip, r1
 80016ca:	eb63 0b0c 	sbc.w	fp, r3, ip
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016e2:	ebb2 040a 	subs.w	r4, r2, sl
 80016e6:	eb63 050b 	sbc.w	r5, r3, fp
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	00eb      	lsls	r3, r5, #3
 80016f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f8:	00e2      	lsls	r2, r4, #3
 80016fa:	4614      	mov	r4, r2
 80016fc:	461d      	mov	r5, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	18e3      	adds	r3, r4, r3
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	460b      	mov	r3, r1
 8001706:	eb45 0303 	adc.w	r3, r5, r3
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001718:	4629      	mov	r1, r5
 800171a:	028b      	lsls	r3, r1, #10
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	4604      	mov	r4, r0
 8001722:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001726:	4601      	mov	r1, r0
 8001728:	028a      	lsls	r2, r1, #10
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	2200      	movs	r2, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	61fa      	str	r2, [r7, #28]
 8001736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800173a:	f7fe fd1f 	bl	800017c <__aeabi_uldivmod>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4613      	mov	r3, r2
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001748:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800174a:	e00d      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0b5b      	lsrs	r3, r3, #13
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175a:	3301      	adds	r3, #1
 800175c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001766:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800176a:	4618      	mov	r0, r3
 800176c:	3748      	adds	r7, #72	; 0x48
 800176e:	46bd      	mov	sp, r7
 8001770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
 8001780:	080018b4 	.word	0x080018b4

08001784 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d12c      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e016      	b.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6253      	str	r3, [r2, #36]	; 0x24
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017d4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017e8:	d105      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017f0:	d101      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 0201 	bic.w	r2, r3, #1
 8001810:	490b      	ldr	r1, [pc, #44]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
 8001840:	40023c00 	.word	0x40023c00

08001844 <__libc_init_array>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	2600      	movs	r6, #0
 8001848:	4d0c      	ldr	r5, [pc, #48]	; (800187c <__libc_init_array+0x38>)
 800184a:	4c0d      	ldr	r4, [pc, #52]	; (8001880 <__libc_init_array+0x3c>)
 800184c:	1b64      	subs	r4, r4, r5
 800184e:	10a4      	asrs	r4, r4, #2
 8001850:	42a6      	cmp	r6, r4
 8001852:	d109      	bne.n	8001868 <__libc_init_array+0x24>
 8001854:	f000 f822 	bl	800189c <_init>
 8001858:	2600      	movs	r6, #0
 800185a:	4d0a      	ldr	r5, [pc, #40]	; (8001884 <__libc_init_array+0x40>)
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <__libc_init_array+0x44>)
 800185e:	1b64      	subs	r4, r4, r5
 8001860:	10a4      	asrs	r4, r4, #2
 8001862:	42a6      	cmp	r6, r4
 8001864:	d105      	bne.n	8001872 <__libc_init_array+0x2e>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	f855 3b04 	ldr.w	r3, [r5], #4
 800186c:	4798      	blx	r3
 800186e:	3601      	adds	r6, #1
 8001870:	e7ee      	b.n	8001850 <__libc_init_array+0xc>
 8001872:	f855 3b04 	ldr.w	r3, [r5], #4
 8001876:	4798      	blx	r3
 8001878:	3601      	adds	r6, #1
 800187a:	e7f2      	b.n	8001862 <__libc_init_array+0x1e>
 800187c:	080018d8 	.word	0x080018d8
 8001880:	080018d8 	.word	0x080018d8
 8001884:	080018d8 	.word	0x080018d8
 8001888:	080018dc 	.word	0x080018dc

0800188c <memset>:
 800188c:	4603      	mov	r3, r0
 800188e:	4402      	add	r2, r0
 8001890:	4293      	cmp	r3, r2
 8001892:	d100      	bne.n	8001896 <memset+0xa>
 8001894:	4770      	bx	lr
 8001896:	f803 1b01 	strb.w	r1, [r3], #1
 800189a:	e7f9      	b.n	8001890 <memset+0x4>

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
